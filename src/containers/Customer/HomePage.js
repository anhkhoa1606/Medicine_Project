import React, { Component } from "react";
import { connect } from "react-redux";
import { getAllProducts } from "../../services/productService";
import { addToCart } from "../../store/actions/cartActions";
import { getCartByUserId } from "../../services/cartService";
import Header from "../Roles/Header";
import { Modal, Button } from "react-bootstrap"; // Th√™m modal t·ª´ Bootstrap
import "./HomePage.scss";
import { withRouter } from "react-router-dom";

class HomePage extends Component {
  state = {
    products: [],
    cartItems: [],
    showModal: false,         // Ki·ªÉm so√°t hi·ªÉn th·ªã modal
    modalMessage: "",         // N·ªôi dung th√¥ng b√°o modal
  };

  componentDidMount() {
    this.fetchProducts();
    this.fetchCartData();
  }

  // L·∫•y danh s√°ch s·∫£n ph·∫©m
  fetchProducts = async () => {
    try {
      let response = await getAllProducts();
      if (response.errCode === 0) {
        this.setState({ products: response.data });
      }
    } catch (error) {
      console.error("Error fetching products", error);
    }
  };

  // L·∫•y gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng
  fetchCartData = async () => {
    const { userInfo } = this.props;
    if (userInfo) {
      try {
        const response = await getCartByUserId(userInfo.id);
        if (response && response.cartItems) {
          this.setState({ cartItems: response.cartItems });
        }
      } catch (error) {
        console.error("Error fetching cart data", error);
      }
    }
  };

  // X·ª≠ l√Ω th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
  handleAddToCart = (product) => {
    const { userInfo } = this.props;
    const { cartItems } = this.state;

    if (!userInfo) {
      this.showModal("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng!");
      return;
    }

    // Ki·ªÉm tra s·∫£n ph·∫©m ƒë√£ t·ªìn t·∫°i ch∆∞a
    const isProductInCart = cartItems.some((item) => item.medicineId === product.id);

    if (isProductInCart) {
      this.showModal("‚ùå S·∫£n ph·∫©m n√†y ƒë√£ c√≥ trong gi·ªè h√†ng!");
      return;
    }

    // Th√™m v√†o gi·ªè h√†ng n·∫øu ch∆∞a c√≥
    const userId = userInfo.id;
    this.props.addToCart(userId, product, 1);
    this.showModal("‚úÖ S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c th√™m v√†o gi·ªè h√†ng!");

    // C·∫≠p nh·∫≠t gi·ªè h√†ng
    this.setState({ cartItems: [...cartItems, { medicineId: product.id, quantity: 1 }] });
  };

  // Hi·ªÉn th·ªã modal th√¥ng b√°o
  showModal = (message) => {
    this.setState({
      showModal: true,
      modalMessage: message,
    });
  };

  // ·∫®n modal
  handleCloseModal = () => {
    this.setState({
      showModal: false,
      modalMessage: "",
    });
  };

  render() {
    const { products, showModal, modalMessage } = this.state;

    return (
      <>
        <Header />
        <div className="container">
          <h2 className="text-center">üõí Danh s√°ch s·∫£n ph·∫©m</h2>
          <div className="product-grid">
            {products.map((product) => (
              <div className="product-card" key={product.id}>
                <img src={product.image} className="product-image" alt={product.name} />
                <h3 className="product-name">{product.name}</h3>
                <p className="product-price">{product.price.toLocaleString()}ƒë</p>
                <button
                  className="buy-button"
                  onClick={() => this.handleAddToCart(product)}
                >
                  üõçÔ∏è Ch·ªçn mua
                </button>
              </div>
            ))}
          </div>
        </div>

        {/* Modal th√¥ng b√°o */}
        <Modal show={showModal} onHide={this.handleCloseModal} centered>
          <Modal.Header closeButton>
            <Modal.Title>Th√¥ng b√°o</Modal.Title>
          </Modal.Header>
          <Modal.Body>
            {modalMessage}
          </Modal.Body>
          <Modal.Footer>
            <Button variant="primary" onClick={this.handleCloseModal}>
              ƒê√≥ng
            </Button>
          </Modal.Footer>
        </Modal>
      </>
    );
  }
}

const mapStateToProps = (state) => ({
  userInfo: state.user.userInfo,
});

const mapDispatchToProps = (dispatch) => ({
  addToCart: (userId, product, quantity) => dispatch(addToCart(userId, product, quantity)),
});

export default withRouter(connect(mapStateToProps, mapDispatchToProps)(HomePage));
